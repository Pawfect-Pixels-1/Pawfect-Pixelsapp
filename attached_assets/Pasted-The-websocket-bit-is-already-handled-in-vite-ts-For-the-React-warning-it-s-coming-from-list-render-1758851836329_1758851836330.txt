The websocket bit is already handled in vite.ts. For the React warning, it’s coming from list rendering inside WelcomePricingSection. Two safe changes fix it and make keys truly stable:

Use the plan slug (object key) as the card key instead of plan.name (names can change).

Use the feature text as the feature key (not the array index).

Here’s a minimal patch you can copy in:

// replace this line:
const planArray = displayPlans ? Object.values(displayPlans).filter(Boolean).sort((a, b) => a.price - b.price) : [];

// with this (stable slugs + sort):
const planArray = displayPlans
  ? Object.entries(displayPlans) // [slug, plan]
      .map(([slug, plan]) => ({ slug, ...plan }))
      .filter(Boolean)
      .sort((a, b) => a.price - b.price)
  : [];


Then update the map + feature keys:

{/* Paid Plans */}
{planArray && planArray.length > 0 && planArray.map((plan, index) => (
  <motion.div
    key={plan.slug}                                 // ← use slug for stable key
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ delay: 0.9 + index * 0.1 }}
  >
    <Card className={`border-2 border-black shadow-[6px_6px_0_#000] relative h-full ${
      plan.name === 'advanced' ? 'scale-105 z-10' : ''
    }`}>
      {plan.name === 'advanced' && (
        <Badge className="absolute -top-3 left-1/2 transform -translate-x-1/2 bg-purple-600 text-white border-2 border-black font-semibold">
          <Crown className="w-3 h-3 mr-1" />
          Most Popular
        </Badge>
      )}

      {/* ...header stays the same... */}

      <CardContent className="space-y-4">
        <ul className="space-y-2">
          {Array.isArray(plan.features) && plan.features.length > 0 && plan.features.map((feature) => (
            <li key={`${plan.slug}-${feature}`} className="flex items-start gap-2">  {/* ← feature text key */}
              <Check className="w-4 h-4 text-green-600 mt-0.5 flex-shrink-0" />
              <span className="text-sm text-gray-700">{feature}</span>
            </li>
          ))}
        </ul>

        {/* ...rest unchanged... */}


Why this fixes it:

Object.entries(displayPlans) gives you the canonical slug (e.g. basic, advanced, premium). Using slug as key is stable even if displayName/name changes.

Using the feature string as the key is stable and avoids reordering issues that can happen with index keys.

Bonus niceties (optional)

If your /api/billing/plans returns slugs already, you can directly keep them as keys and skip sorting (or sort by plan.order if you add one).

If you ever localize feature strings, you can still create a stable key like:
key={plan.slug + '-' + (feature.id ?? feature)} if you move to {id, label} features.

After these two edits, the “unique key” warning should disappear. If it persists, tell me the exact line Vite logs (or paste the full warning again) and I’ll pinpoint any other list.